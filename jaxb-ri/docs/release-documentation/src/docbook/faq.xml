<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2012, 2022 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Distribution License v. 1.0, which is available at
    http://www.eclipse.org/org/documents/edl-v10.php.

    SPDX-License-Identifier: BSD-3-Clause

-->

<!DOCTYPE book [
<!ENTITY % ents SYSTEM "docbook.ent">
%ents;
]>
<chapter version="5.0" xml:id="faq" xml:lang="en"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/1999/xhtml"
         xmlns:ns3="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:m="http://www.w3.org/1998/Math/MathML">
    <title>Frequently Asked Questions</title>

    <qandaset defaultlabel="qanda">
        <qandadiv>
            <title>JAXB 2.0</title>

            <qandaentry>
                <question>
                    <para>Which version of Java SE does &binding.impl.name; &version; require?</para>
                </question>
                
                <answer>
                    <para>Java SE 11 or higher.</para>
                </answer>
            </qandaentry>

            <qandaentry>
                <question>
                    <para>Can I run my existing JAXB 1.x/2.x applications on the
                        &binding.impl.name; runtime?</para>
                </question>

                <answer>
                    <para>This is not supported.</para>
                </answer>
            </qandaentry>

            <qandaentry>
                <question>
                    <para>What if I want to port my JAXB 1.x/2.x application to &binding.spec.name; runtime?</para>
                </question>

                <answer>
                    <para>You need to replace references to <literal>javax.xml.bind</literal>
                        package by <literal>jakarta.xml.bind</literal> package, recompile your schema
                        with the newer xjc and modify your application code to work with
                        the new bindings.</para>
                </answer>
            </qandaentry>

            <qandaentry>
                <question>
                    <para>Where are <literal>schemagen</literal> and <literal>xjc</literal> command line scripts available?</para>
                </question>

                <answer>
                    <para>They are included only in the <link linkend="Maven_artifacts">zip distribution.</link></para>
                </answer>
            </qandaentry>

            <qandaentry>
                <question>
                    <para>Are the &binding.spec.name; runtime API's thread safe?</para>
                </question>

                <answer>
                    <para>The &binding.spec.name; Specification currently does not address
                    the thread safety of any of the runtime classes. In the
                    case of the &binding.impl.name;, the
                    <literal>JAXBContext</literal> class <emphasis
                    role="bold">is</emphasis> thread safe, but the
                    <literal>Marshaller</literal>,
                    <literal>Unmarshaller</literal>, and
                    <literal>Validator</literal> classes <emphasis
                    role="bold">are not</emphasis> thread safe.</para>

                    <para>For example, suppose you have a multi-thread server
                    application that processes incoming XML documents by &binding.spec.name;.
                    In this case, for the best performance you should have
                    just one instance of <literal>JAXBContext</literal> in
                    your whole application like this:</para>

                    <informalexample>
                        <programlisting language="java"><![CDATA[class MyServlet extends HttpServlet {
    static final JAXBContext context = initContext();

    private static JAXBContext initContext() {
        return JAXBContext.newInstance("....", MyServlet.class.getClassLoader());
    }
}]]></programlisting>
                    </informalexample>

                    <para>And each time you need to unmarshal/marshal/validate
                    a document. Just create a new
                    <literal>Unmarshaller</literal>/<literal>Marshaller</literal>/<literal>Validator</literal>
                    from this context, like this:</para>

                    <informalexample>
                        <programlisting language="java"><![CDATA[public void doGet(HttpServletRequest req, HttpServletResponse resp) {
    Unmarshaller u = context.createUnmarshaller();
    u.unmarshal(...);
}]]></programlisting>
                    </informalexample>

                    <para>This is the simplest safe way to use the &binding.impl.name;
                    from multi-threaded applications.</para>

                    <para>If you really care about the performance, and/or
                    your application is going to read a lot of small
                    documents, then creating <literal>Unmarshaller</literal>
                    could be relatively an expensive operation. In that case,
                    consider pooling <literal>Unmarshaller</literal> objects.
                    Different threads may reuse one
                    <literal>Unmarshaller</literal> instance, as long as you
                    don't use one instance from two threads at the same
                    time.</para>
                </answer>
            </qandaentry>

            <qandaentry>
                <question>
                    <para>Why can't I cast the unmarshalled object into the
                    generated type.</para>
                </question>

                <answer>
                    <para>When you invoke
                    <literal>JAXBContext.newInstance("aaa.bbb.ccc")</literal>,
                    it tries to load classes and resources using the same
                    classloader used to load the
                    <literal>JAXBContext</literal> class itself. This
                    classloader may be different from the classloader which
                    was used to load your application (see the picture <xref
                    linkend="faq-figure-1" xrefstyle="select:title" />). In
                    this case, you'll see the above error. This problem is
                    often seen with application servers, Jakarta EE containers, Ant,
                    JUnit, and other applications that use sophisticated class
                    loading mechanisms.</para>

                    <figure xml:id="faq-figure-1">
                        <title>Parent/Child classloader</title>

                        <mediaobject>
                            <imageobject>
                                <imagedata contentdepth="100%"
                                           fileref="figures/classLoaderFAQ.gif"
                                           scalefit="1" width="100%"></imagedata>
                            </imageobject>
                        </mediaobject>
                    </figure>

                    <para>With some applications, things get even more
                    complicated when the &binding.spec.name;-generated code can be loaded by
                    either classloader. In this case,
                    <literal>JAXBContext.newInstance("aaa.bbb.ccc")</literal>
                    will work but the JVM ends up loading two copies of the
                    generated classes for each class loader. As a result,
                    unmarshalling works but an attempt to cast the returned
                    object into the expected type will fail, even though its
                    <literal>getClass().getName()</literal> returns the
                    expected name.</para>

                    <para>The solution for both situations is to pass your
                    curent class loader like this:</para>

                    <informalexample>
                        <programlisting language="java"><![CDATA[JAXBContext.newInstance("aaa.bbb.ccc", this.getClass().getClassLoader());]]></programlisting>
                    </informalexample>

                    <para>In general, if you are writing code that uses &binding.spec.name;,
                    it is always better to explicitly pass in a class loader,
                    so that your code will work no matter where it is
                    deployed.</para>
                </answer>
            </qandaentry>

            <qandaentry>
                <question>
                    <para>Which jar files do I need to distribute with my
                    application that uses the &binding.impl.name;?</para>
                </question>

                <answer>
                    <para>
                    <informalexample>
                        <programlisting><![CDATA[
$JAXB_HOME/mod/jakarta.xml.bind-api.jar
$JAXB_HOME/mod/jakarta.activation-api.jar
$JAXB_HOME/mod/angus-activation.jar
$JAXB_HOME/mod/jaxb-core.jar
$JAXB_HOME/mod/jaxb-impl.jar]]></programlisting>
                    </informalexample>
                    </para>
                </answer>
            </qandaentry>

            <qandaentry>
                <question>
                    <para>How can I cause the <literal>Marshaller</literal> to
                    generate <literal>CDATA</literal> blocks?</para>
                </question>

                <answer>
                    <para>This functionality is not available from &binding.impl.name;
                    directly, but you can configure an Apache Xerces-J
                    <literal>XMLSerializer</literal> to produce
                    <literal>CDATA</literal> blocks. Please review the <link
                    xlink:href="download/JaxbCDATASample.java">JaxbCDATASample.java</link>
                    sample app for more detail.</para>
                </answer>
            </qandaentry>

            <qandaentry>
                <question>
                    <para>Can I access &lt;xs:any/&gt; as a DOM node?</para>
                </question>

                <answer>
                    <para>In &binding.impl.name;, &lt;xs:any/&gt; is handled correctly
                    without any customization.</para>

                    <orderedlist>
                        <listitem>
                            <para>If it's <literal>strict</literal>, it will map
                            to <literal>Object</literal> or
                            <literal>List&lt;Object&gt;</literal> and when you
                            unmarshal documents, you'll get objects that map to
                            elements (such as <literal>JAXBElements</literal> or
                            classes that are annotated with
                            <literal>XmlRootElement</literal>).</para>
                        </listitem>

                        <listitem>
                            <para>If it's <literal>skip</literal>, it will map
                            to <literal>org.w3c.dom.Element</literal> or
                            <literal>List&lt;Element&gt;</literal> and when you
                            unmarshal documents, you'll get DOM elements.</para>
                        </listitem>

                        <listitem>
                            <para>If it's <literal>lax</literal>, it will map to
                            the same as with <literal>strict</literal>, and when
                            you unmarshal documents, you'll get either:</para>

                            <orderedlist>
                                <listitem>
                                    <para><literal>JAXBElement</literal>s</para>
                                </listitem>

                                <listitem>
                                    <para>classes that are annotated with
                                    <literal>XmlRootElement</literal></para>
                                </listitem>

                                <listitem>
                                    <para>DOM elements</para>
                                </listitem>
                            </orderedlist>
                        </listitem>
                    </orderedlist>
                </answer>
            </qandaentry>

            <qandaentry>
                <question>
                    <para>How do I find out which version of the &binding.impl.name; I'm
                    using?</para>
                </question>

                <answer>
                    <para>Run the following command</para>

                    <informalexample>
                        <programlisting language="cli"><![CDATA[$ java -jar jaxb-xjc.jar -version]]></programlisting>
                    </informalexample>

                    <para>Alternatively, each &binding.impl.name; jar has version information
                    in its <literal>META-INF/MANIFEST.MF</literal>, such as
                    this:</para>

                    <informalexample>
                        <programlisting>Manifest-Version: 1.0
Specification-Title: &binding.spec.name;
Specification-Version: &binding.spec.version;
Specification-Vendor: Eclipse Foundation
Implementation-Title: &binding.impl.name;
Implementation-Version: &version;
Implementation-Vendor: Eclipse Foundation
Implementation-Vendor-Id: org.eclipse
Build-Id: 2022-05-18 22:33
Class-Path: jaxb-core.jar jaxb-impl.jar</programlisting>
                    </informalexample>
                </answer>
            </qandaentry>
        </qandadiv>
    </qandaset>
</chapter>
