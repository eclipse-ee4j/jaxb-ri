<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2018, 2022 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Distribution License v. 1.0, which is available at
    http://www.eclipse.org/org/documents/edl-v10.php.

    SPDX-License-Identifier: BSD-3-Clause

-->

<!DOCTYPE book [
<!ENTITY % ents SYSTEM "docbook.ent">
%ents;
]>
<section version="5.0"
         xml:id="deployment-maven-coordinates"
         xml:lang="en" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/1999/xhtml"
         xmlns:ns3="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:m="http://www.w3.org/1998/Math/MathML">
    <title>Using &binding.impl.name; with Maven</title>


    <section xml:id="Maven_artifacts">
        <title>Maven coordinates for &binding.impl.name; artifacts</title>
        <itemizedlist>
            <listitem>
                <para><emphasis role="bold">jakarta.xml.bind:jakarta.xml.bind-api:</emphasis> API classes for &binding.spec.name;.
                    Required to compile against &binding.spec.name;.</para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">org.glassfish.jaxb:jaxb-core:</emphasis> Contains sources required by XJC,
                    JXC and Runtime modules.</para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">org.glassfish.jaxb:jaxb-runtime:</emphasis> Contains the main runtime used
                    for serialization and deserialization java objects to/from xml.</para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">org.glassfish.jaxb:jaxb-xjc:</emphasis> Tool to generate &binding.spec.name; java sources
                    from XML representation.</para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">org.glassfish.jaxb:jaxb-jxc:</emphasis> Tool to generate XML schema from
                    &binding.spec.name; java sources.</para>
            </listitem>
        </itemizedlist>
    </section>

    <section xml:id="Fat-jar">
        <title>JAXB RI bundles</title>
        <itemizedlist>
            <listitem>
                <para><emphasis role="bold">com.sun.xml.bind:jaxb-core:</emphasis> Contains sources required by XJC,
                    JXC and Runtime modules with dependencies.</para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">com.sun.xml.bind:jaxb-impl:</emphasis> &binding.impl.name; runtime jar.</para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">com.sun.xml.bind:jaxb-xjc:</emphasis> Class generation tool jar.</para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">com.sun.xml.bind:jaxb-jxc:</emphasis> Schema generation tool jar.</para>
            </listitem>
        </itemizedlist>
        <para>In contrast to <literal>org.glassfish.jaxb</literal> artifacts, these jars have all dependency classes included inside.
            </para>
    </section>

    <section xml:id="Binary-distribution">
        <title>Binary distribution</title>
        <itemizedlist>
            <listitem>
                <para><emphasis role="bold">com.sun.xml.bind:jaxb-ri:</emphasis> Zip distribution containing tooling
                    scripts and all dependency jars in one archive.</para>
            </listitem>
        </itemizedlist>
    </section>

    <section xml:id="Api_and_runtime">
        <title>&binding.spec.name; API and Runtime</title>
        <para>
            Minimum requirement to compile is <literal>jakarta.xml.bind-api.jar</literal>. If a client application is running on an environment
            where &binding.spec.name;
            runtime is provided, <literal>jakarta.xml.bind-api.jar</literal> is all that is needed.
                <example><title>API only</title>

                <programlisting language="xml">
                &lt;!-- API --&gt;
                &lt;dependency&gt;
                    &lt;groupId&gt;jakarta.xml.bind&lt;/groupId&gt;
                    &lt;artifactId&gt;jakarta.xml.bind-api&lt;/artifactId&gt;
                    &lt;version&gt;&binding.spec.impl.version;&lt;/version&gt;
                &lt;/dependency&gt;</programlisting>
            </example></para>

        <para>
            If client application needs to include the runtime, e.g. running standalone on Java SE
            <literal>jaxb-impl</literal> should be also included.
            <example><title>API + Runtime</title>

            <programlisting language="xml">
                &lt;!-- API --&gt;
                &lt;dependency&gt;
                    &lt;groupId&gt;jakarta.xml.bind&lt;/groupId&gt;
                    &lt;artifactId&gt;jakarta.xml.bind-api&lt;/artifactId&gt;
                    &lt;version&gt;&binding.spec.impl.version;&lt;/version&gt;
                &lt;/dependency&gt;

                &lt;!-- Runtime --&gt;
                &lt;dependency&gt;
                    &lt;groupId&gt;com.sun.xml.bind&lt;/groupId&gt;
                    &lt;artifactId&gt;jaxb-impl&lt;/artifactId&gt;
                    &lt;version&gt;&version;&lt;/version&gt;
                &lt;/dependency&gt;</programlisting>
        </example></para>
    </section>


    <section xml:id="Jaxb_tooling">
        <title>Using &binding.impl.name; tools for java sources and XML schema generation</title>

        <para>
            To generate &binding.spec.name; classes from schema in Maven project, there are multiple community plugins
            available:
            <itemizedlist>
                <listitem>
                    <para>The most advanced and feature-full Maven plugin for XML Schema compilation:
                        <link xlink:href="https://github.com/highsource/maven-jaxb2-plugin">highsource maven-jaxb2-plugin</link>
                        <example><title>Using highsource maven-jaxb2-plugin</title>

                            <programlisting language="xml"><![CDATA[
                <build>
                    <plugins>
                        <plugin>
                            <groupId>org.jvnet.jaxb2.maven2</groupId>
                            <artifactId>maven-jaxb2-plugin</artifactId>
                            <executions>
                                <execution>
                                    <goals>
                                        <goal>generate</goal>
                                    </goals>
                                </execution>
                            </executions>
                        </plugin>
                    </plugins>
                </build>]]></programlisting>
                        </example>
                        See the <link xlink:href="https://github.com/highsource/maven-jaxb2-plugin/wiki/User-Guide">maven-jaxb2-plugin user guide</link> for configuration details.
                    </para>
                </listitem>
                <listitem>
                    <para>A Maven plugin originating from MojoHaus which has been updated for &binding.spec.name; 3+ by Evolved Binary:
                        <link xlink:href="https://github.com/evolvedbinary/mojohaus-jaxb-maven-plugin">MojoHaus jaxb-maven-plugin</link>
                        <example><title>Using MojoHaus jaxb-maven-plugin</title>

                            <programlisting language="xml"><![CDATA[
                <build>
                    <plugins>
                        <plugin>
                            <groupId>com.evolvedbinary.maven.mojohaus</groupId>
                            <artifactId>jaxb-maven-plugin</artifactId>
                            <executions>
                                <execution>
                                    <id>schemagen</id>
                                    <goals>
                                        <goal>schemagen</goal>
                                    </goals>
                                </execution>
                            </executions>
                        </plugin>
                    </plugins>
                </build>]]></programlisting>
                        </example>
                        See the <link xlink:href="https://evolvedbinary.github.io/mojohaus-jaxb-maven-plugin/">MojoHaus jaxb-maven-plugin documentation</link> for configuration details.
                    </para>
                </listitem>
                <listitem>
                    <para>A Maven plugin originating from java.net which has been updated for &binding.spec.name; 3+ by Evolved Binary:
                        <link xlink:href="https://github.com/evolvedbinary/jvnet-jaxb-maven-plugin">jvnet jaxb-maven-plugin</link>
                        <example><title>Using jvnet jaxb-maven-plugin</title>

                            <programlisting language="xml"><![CDATA[
                <build>
                    <plugins>
                        <plugin>
                            <groupId>com.evolvedbinary.maven.jvnet</groupId>
                            <artifactId>jaxb-maven-plugin</artifactId>
                            <executions>
                                <execution>
                                    <id>generate</id>
                                    <goals>
                                        <goal>generate</goal>
                                    </goals>
                                </execution>
                            </executions>
                        </plugin>
                    </plugins>
                </build>]]></programlisting>
                        </example>
                        See the <link xlink:href="https://github.com/evolvedbinary/jvnet-jaxb-maven-plugin">jvnet jaxb-maven-plugin documentation</link> for configuration details.
                    </para>
                </listitem>
            </itemizedlist>
        </para>

    <para>
        Alternatively to community plugins, there are tooling artifacts jaxb-xjc and jaxb-jxc,
        which can be used for
        java from XML schema generation and vice versa.
        <example><title>Using &binding.impl.name; tooling artifacts</title>

            <programlisting language="xml">
            &lt;!-- Tooling dependencies --&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.sun.xml.bind&lt;/groupId&gt;
                &lt;artifactId&gt;jaxb-xjc&lt;/artifactId&gt;
                &lt;version&gt;&version;&lt;/version&gt;
            &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;com.sun.xml.bind&lt;/groupId&gt;
                &lt;artifactId&gt;jaxb-jxc&lt;/artifactId&gt;
                &lt;version&gt;&version;&lt;/version&gt;
            &lt;/dependency&gt;

            &lt;!-- Invoke tooling API (Java 11) --&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
                &lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;
                    &lt;!-- Generate java sources from schema --&gt;
                    &lt;execution&gt;
                        &lt;id&gt;xjc&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;exec&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;configuration&gt;
                            &lt;executable&gt;java&lt;/executable&gt;
                            &lt;arguments&gt;
                                &lt;argument&gt;--module-path&lt;/argument&gt;
                                &lt;modulepath/&gt;
                                &lt;argument&gt;-m&lt;/argument&gt;
                                &lt;argument&gt;com.sun.tools.xjc&lt;/argument&gt;
                                &lt;argument&gt;-p&lt;/argument&gt;
                                &lt;argument&gt;com.example&lt;/argument&gt;
                                &lt;argument&gt;-d&lt;/argument&gt;
                                &lt;argument&gt;${project.build.directory}/generated-sources&lt;/argument&gt;
                                &lt;argument&gt;${project.build.directory}/classes/schema.xsd&lt;/argument&gt;
                            &lt;/arguments&gt;
                        &lt;/configuration&gt;
                    &lt;/execution&gt;

                    &lt;!-- Generate XML Schema from sources --&gt;
                    &lt;execution&gt;
                        &lt;id&gt;jxc&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;exec&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;configuration&gt;
                            &lt;executable&gt;java&lt;/executable&gt;
                            &lt;arguments&gt;
                                &lt;argument&gt;--module-path&lt;/argument&gt;
                                &lt;modulepath/&gt;
                                &lt;argument&gt;-m&lt;/argument&gt;
                                &lt;argument&gt;com.sun.tools.jxc&lt;/argument&gt;
                                &lt;argument&gt;-d&lt;/argument&gt;
                                &lt;argument&gt;${project.build.directory}/generated-sources&lt;/argument&gt;
                                &lt;argument&gt;${project.build.directory}/classes/com/example/Author.java&lt;/argument&gt;
                                &lt;argument&gt;${project.build.directory}/classes/com/example/Book.java&lt;/argument&gt;
                            &lt;/arguments&gt;
                            &lt;longModulepath&gt;false&lt;/longModulepath&gt;
                        &lt;/configuration&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;</programlisting>
        </example>
    See also <link linkend='schema-generation-invoking-schemagen-programatically'>xml schema compiler usage</link>.</para>

        <para><literal>schemagen</literal> and <literal>xjc</literal> command line scripts are available
        only in the <link linkend="Maven_artifacts">zip distribution.</link></para>
    </section>

</section>
